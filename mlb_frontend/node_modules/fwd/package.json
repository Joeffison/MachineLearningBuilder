{
  "_args": [
    [
      "fwd@^0.2.2",
      "/home/joeffison/workspace/MachineLearningBuilder/mlb_frontend/node_modules/gulp-hub"
    ]
  ],
  "_from": "fwd@>=0.2.2 <0.3.0",
  "_id": "fwd@0.2.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/fwd",
  "_npmUser": {
    "email": "julian@juliangruber.com",
    "name": "juliangruber"
  },
  "_npmVersion": "1.1.61",
  "_phantomChildren": {},
  "_requested": {
    "name": "fwd",
    "raw": "fwd@^0.2.2",
    "rawSpec": "^0.2.2",
    "scope": null,
    "spec": ">=0.2.2 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-hub"
  ],
  "_resolved": "https://registry.npmjs.org/fwd/-/fwd-0.2.2.tgz",
  "_shasum": "0d19f99b40f8af83b8792203ba50dce7e46f7530",
  "_shrinkwrap": null,
  "_spec": "fwd@^0.2.2",
  "_where": "/home/joeffison/workspace/MachineLearningBuilder/mlb_frontend/node_modules/gulp-hub",
  "author": {
    "email": "julian@juliangruber.com",
    "name": "Julian Gruber"
  },
  "bugs": {
    "url": "https://github.com/juliangruber/fwd/issues"
  },
  "dependencies": {},
  "description": "Forward one (emitter|stream)'s events to another",
  "devDependencies": {
    "emitter-component": "*",
    "expect.js": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "0d19f99b40f8af83b8792203ba50dce7e46f7530",
    "tarball": "https://registry.npmjs.org/fwd/-/fwd-0.2.2.tgz"
  },
  "homepage": "https://github.com/juliangruber/fwd#readme",
  "keywords": [
    "emitter",
    "event",
    "eventemitter",
    "forward",
    "glue",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    }
  ],
  "name": "fwd",
  "optionalDependencies": {},
  "readme": "\n# fwd\n\nForward one `(emitter|stream)`'s events to another -> connect parts of your application whose interface you have no control over.\n\nThis is compatible both with the node-core EventEmitter and with [component/emitter](https://github.com/component/emitter).\n\n## Installation\n\n```bash\n$ component install juliangruber/fwd\n$ npm install fwd\n```\n## Usage\n\n### EventEmitter → EventEmitter\n\n```javascript\nvar fwd = require('fwd');\nvar Stream = require('stream');\nvar EventEmitter = require('events').EventEmitter;\n// or: var EventEmitter = require('emitter')\n\nvar src = new EventEmitter();\nvar dest = new EventEmitter();\n\nfwd(src, dest);\n\ndest.on('event', function() {\n  // success\n});\n\nsrc.emit('event');\n```\n\n### Stream → EventEmitter\n\n```javascript\nvar src = new Stream();\nsrc.readable = true;\nvar dest = new EventEmitter();\n\nfwd(src, dest, {'data': 'entry'});\n```\n\n### EventEmitter → Stream\n\n```javascript\nvar src = new EventEmitter();\nvar dest = new Stream();\ndest.writable = true;\n\nfwd(src, dest, 'entry');\nfwd(src, dest, {'wrong': JSON.stringify});\n```\n\n### Stream → Stream\n\n```javascript\nvar src = new Stream();\nsrc.readable = true;\nvar dest = new Stream();\ndest.writable = true;\n\nfwd(src, dest, function(data) {\n  return data*2;\n});\n```\n\n### Rules\n\nYou can rewrite data on-the-fly:\n\n```javascript\nvar src = new EventEmitter();\nvar dest = new EventEmitter();\n\nfwd(src, dest, '*');                                // the same as with no 3rd argument\nfwd(src, dest, ['event1', 'event2'])                // only forward event1 and event2\nfwd(src, dest, [{'event1': 'entry'}, '*'])          // forward event1 as entry and everything else\nfwd(src, dest, [{'event1': function(data) {         // forward event1 with it's data doubled \n  return data*2;\n}}]);\nfwd(src, dest, [{'event1': function(event, data) {  // also rewrite the event name\n  return {\n    event: 'event-foo',\n    data : data*2\n  }\n}}]);\nfwd(src, dest, function(event, data) {              // forward and rewrite everything\n  return {                                          // the same as: {'*': function(){ ... }}\n    event: 'my-'+event,\n    data : JSON.stringify(data)\n  }\n});\n```\n\n## API\n\n### fwd(src, dest)\n\nForward all events from `src` to `dest`.\n\n### fwd(src, dest, event=string)\n\nForward only `event`.\n\n### fwd(src, dest, events=[string,..])\n\nForward only `events`.\n\n### fwd(src, dest, mapping={from: to})\n\nRewrite names and fwd only that. `mapping` can be in an array to do multiple rewrites at one.\n\n### fwd(src, dest, fn=function)\n\nApply `fn` to\n\n* `(data)` and return modified `data`\n* `(event, data)` and return `{event:'event', data:'data'}`\n\n`fn` can also appear inside mappings.\n\n### stop()\n\n`stop` is returned by every `fwd`-call, so you can stop forwarding. Use this as stream-unpipe which isn't in the stream class yet.\n\n## Tests\n\n```bash\n$ git clone https://github.com/juliangruber/fwd.git && cd fwd\n$ npm install\n$ mocha\n```\n\n## License\n\nCopyright (c) 2012 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/juliangruber/fwd.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.2"
}
